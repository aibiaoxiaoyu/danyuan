apply plugin: 'com.android.library'
apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.7.9"
}
android {
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {//仅能测试本module的单元测试
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled = true
        html.enabled = true
    }

    classDirectories = fileTree(
            //dir:指定文件夹路径
            dir: "$buildDir/intermediates/classes/debug",//可行
//            dir: "../",// 不可行，运行报错
//            dir: '../app/build',//出现app及android源码的所有package，没有库工程的
//            dir: '../app',//出现app及android源码的所有package，没有库工程的
//            includes: ['com/danyuan/AppUtil.*','com/libone/LibOneUtil.*'],//在对应的目录下，指定文件，不指定则全选
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']          // 去掉不进行检查的文件
    )

    def coverageSourceDirs = ['src/main/java']
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}